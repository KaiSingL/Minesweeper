type: edu
custom_name: stage2
files:
- name: src/minesweeper/Main.java
  visible: true
  text: "package minesweeper;\nimport java.util.concurrent.ThreadLocalRandom;\n\n\
    public class Main {\n    static char[][] field = new char[9][9];\n    static int\
    \ count = 0;\n    public static void main(String[] args) {\n        \n       \
    \ \n        for (int i = 0; i < field.length; i++) {\n            for (int j =\
    \ 0; j < field[0].length; j++) {\n                field[i][j] = '.';\n       \
    \     }\n        }\n        \n        while (count != 10) {\n            int x\
    \ = ThreadLocalRandom.current().nextInt(0,9);\n            int y = ThreadLocalRandom.current().nextInt(0,9);\n\
    \            if (field[x][y] == '.') {\n                field[x][y] = 'X';\n \
    \               count ++;\n            }\n        }\n        \n        for (int\
    \ i = 0; i < field.length; i++) {\n            System.out.printf(\"%c%c%c%c%c%c%c%c%c\\\
    n\", \n                field[i][0], \n                field[i][1],\n         \
    \       field[i][2],\n                field[i][3],\n                field[i][4],\n\
    \                field[i][5],\n                field[i][6],\n                field[i][7],\n\
    \                field[i][8]);\n        }\n        \n    }\n}\n"
  learner_created: false
- name: test/MinesweeperTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.*;
    import java.util.stream.Collectors;

    public class MinesweeperTest extends StageTest<Integer> {
        @Override
        public List<TestCase<Integer>> generate() {
            List<TestCase<Integer>> tests = new ArrayList<>();
            for (int i = 1; i <= 50; i++) {
                int mines = i;
                TestCase<Integer> test = new TestCase<Integer>()
                    .setDynamicTesting(() -> {
                        TestedProgram main = new TestedProgram();
                        main.start();
                        String output = main.execute("" + mines);
                        return test(output, mines);
                    });
                tests.add(test);
                tests.add(test);
            }
            return tests;
        }

        public CheckResult test(String reply, Integer attach) {
            List<String> lines =
                Arrays.stream(reply.split("\n"))
                    .map(String::trim)
                    .collect(Collectors.toList());

            if (lines.isEmpty()) {
                return CheckResult.wrong(
                    "Looks like you didn't output a single line!"
                );
            }

            if (lines.size() != 9) {
                return CheckResult.wrong(
                    "You should output exactly 9 lines of the field. Found: " + lines.size() + "."
                );
            }

            int mines = 0;

            for (String line : lines) {
                if (line.length() != 9) {
                    return CheckResult.wrong(
                        "One of the lines of the field doesn't have 9 symbols, " +
                            "but has " + line.length() + ".\n" +
                            "This line is \"" + line + "\""
                    );
                }

                for (char c : line.toCharArray()) {
                    if (c != 'X' && c != '.') {
                        return CheckResult.wrong(
                            "One of the characters is not equal to either 'X' or '.'.\n" +
                                "In this line: \"" + line + "\"."
                        );
                    }
                    if (c == 'X') {
                        mines++;
                    }
                }
            }

            if (attach != mines) {
                return CheckResult.wrong(
                    "Expected to see " + attach + " mines, found " + mines
                );
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/7201#comment
status: Solved
record: 2
